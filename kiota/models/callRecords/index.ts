/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { deserializeIntoIdentity, serializeIdentity, type Identity } from '../index.js';
// @ts-ignore
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserIdentity}
 */
export function createUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserIdentity;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUserIdentity(userIdentity: Partial<UserIdentity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(userIdentity),
        "userPrincipalName": n => { userIdentity.userPrincipalName = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserIdentity(writer: SerializationWriter, userIdentity: Partial<UserIdentity> | undefined = {}) : void {
    serializeIdentity(writer, userIdentity)
    writer.writeStringValue("userPrincipalName", userIdentity.userPrincipalName);
}
export interface UserIdentity extends Identity, Parsable {
    /**
     * The userPrincipalName property
     */
    userPrincipalName?: string;
}
/* tslint:enable */
/* eslint-enable */
